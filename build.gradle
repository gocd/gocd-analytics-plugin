/*
 * Copyright 2020 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "com.moowork.node" version "1.3.1"
}
apply from: "https://raw.githubusercontent.com/gocd/gocd-plugin-gradle-task-helpers/master/helper.gradle?_=${(int) (new Date().toInstant().epochSecond / 60)}"
apply plugin: 'java'

node {
  version = "14.3.0"
}

group = 'com.thoughtworks.gocd'

gocdPlugin {
  id = 'com.thoughtworks.gocd.analytics'
  pluginVersion = '3.1.0'
  goCdVersion = '20.9.0'
  name = 'GoCD Analytics Plugin'
  description = 'GoCD Analytics Plugin'
  vendorName = 'ThoughtWorks, Inc.'
  vendorUrl = 'https://github.com/gocd/gocd-analytics-plugin'

  githubRepo {
    owner = System.getenv('GITHUB_USER') ?: 'bob'
    repo = 'gocd-analytics-plugin'
    token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
  }

  pluginProject = project

  prerelease = !"No".equalsIgnoreCase(System.getenv('PRERELEASE'))
  assetsToRelease = [project.tasks.findByName('jar')]
}

version = gocdPlugin.fullVersion(project)
sourceCompatibility = 11
targetCompatibility = 11

// In this section you declare where to find the dependencies of your project
repositories {
  mavenCentral()
  mavenLocal()
}

sourceSets {
  integrationTest {
    java.srcDirs = ['src/integration/java']
    resources.srcDirs += ['src/testdata']
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
  compileOnly 'cd.go.plugin:go-plugin-api:21.3.0'
  implementation 'com.google.code.gson:gson:2.8.9'
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'commons-io:commons-io:2.11.0'
  implementation 'commons-codec:commons-codec:1.15'
  implementation 'org.postgresql:postgresql:42.3.1'
  implementation 'org.apache.commons:commons-dbcp2:2.9.0'
  implementation 'org.mybatis:mybatis:3.5.7'
  implementation 'ch.qos.logback:logback-classic:1.2.7'
  implementation 'com.google.code.gson:gson:2.8.9'
  implementation 'com.google.guava:guava:23.0'
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.flywaydb:flyway-core:4.2.0'
  implementation 'org.slf4j:slf4j-simple:1.7.32'

  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
  testImplementation 'org.mockito:mockito-core:4.1.0'
  testImplementation 'org.skyscreamer:jsonassert:1.5.0'
  testImplementation 'org.jsoup:jsoup:1.14.3'
  testImplementation 'org.skyscreamer:jsonassert:1.3.0'
  testImplementation 'cd.go.plugin:go-plugin-api:21.3.0'

  integrationTestImplementation 'org.slf4j:slf4j-simple:1.7.32'
}

clean.doFirst {
    delete "${rootDir}/src/main/resources-generated"
    delete "${rootDir}/build"
}

task generateWebpackAssets(type: NpmTask) {
  inputs.files(fileTree('node_modules'))
  inputs.files(fileTree('assets'))
  inputs.file('package.json')
  inputs.file('package-lock.json')
  inputs.file('config/webpack.config.js')

  outputs.dir('build/resources/webpack')

  dependsOn npm_install
  args = ['run', System.getenv('FOR_ENVIRONMENT') == 'development' ? 'webpack-dev' : 'webpack-prod']
}

def props = [
  'db.host'    : System.getenv('DB_HOST') ? System.getenv('DB_HOST') : 'localhost',
  'db.user'    : System.getenv('DB_USER') ? System.getenv('DB_USER') : 'postgres',
  'db.password': System.getenv('DB_PASSWORD') ? System.getenv('DB_PASSWORD') : 'postgres',
  'db.port'    : System.getenv('DB_PORT') ? System.getenv('DB_PORT') : '5432',
  'db.name'    : System.getenv('DB_NAME') ? System.getenv('DB_NAME') : 'gocd_test'
]
project.ext.testSystemProperties = props

task dropDB(type: Exec) {
  outputs.upToDateWhen { false }

  commandLine = ['dropdb', '--if-exists', '--host', project.testSystemProperties['db.host'], '--port', project.testSystemProperties['db.port'], '--username', project.testSystemProperties['db.user'], project.testSystemProperties['db.name']]
  standardOutput = System.out
  errorOutput = System.err

  doFirst {
    logger.lifecycle("Attempting to drop DB '${project.testSystemProperties['db.name']}' on '${project.testSystemProperties['db.host']}'")
  }
}

task createDB(type: Exec) {
  dependsOn dropDB
  outputs.upToDateWhen { false }
  commandLine = ['createdb', '--host', project.testSystemProperties['db.host'], '--port', project.testSystemProperties['db.port'], '--username', project.testSystemProperties['db.user'], project.testSystemProperties['db.name']]

  standardOutput = System.out
  errorOutput = System.err

  doFirst {
    logger.lifecycle("Attempting to create DB '${project.testSystemProperties['db.name']}' on '${project.testSystemProperties['db.host']}'")
  }
}

task prepareDb() {
  dependsOn createDB
}

task integrationTest(type: Test, description: 'Runs the DB integration tests.') {
  systemProperties(props)
  useJUnitPlatform()
  dependsOn prepareDb
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath

  shouldRunAfter test
}

task packageAssetSourceMaps(type: Zip) {
  dependsOn generateWebpackAssets

  from "${project.buildDir}/resources/webpack"
  destinationDirectory = file("${project.buildDir}/libs")
  archiveFileName = "${project.name}-${project.version}-source-maps.zip"
  include '**/*.map'

  preserveFileTimestamps = false
  reproducibleFileOrder = true
}

task packageAssets(type: Zip) {
  dependsOn packageAssetSourceMaps

  from "${project.buildDir}/resources/webpack"
  destinationDirectory = file("${project.buildDir}/resources")
  archiveFileName = 'assets.zip'
  exclude '**/*.map'

  preserveFileTimestamps = false
  reproducibleFileOrder = true
}

processResources {
  from("src/main/resource-templates") {
    filesMatching('plugin.xml') {
      expand project.pluginDesc
    }

    filesMatching('plugin.properties') {
      expand project.pluginDesc
    }
  }

  from packageAssets

  dependsOn "generateResources" // defined in gocd-plugin-gradle-task-helpers
}

task lint(type: NpmTask) {
  inputs.files(fileTree('node_modules'))
  inputs.files(fileTree('assets/js'))
  inputs.file('package.json')
  inputs.file('package-lock.json')

  dependsOn npm_install
  args = ['run', 'lint']
}

task assetSpecs(type: NpmTask) {
  inputs.files(fileTree('node_modules'))
  inputs.files(fileTree('spec'))
  inputs.file('package.json')
  inputs.file('package-lock.json')
  inputs.file('config/webpack.config.js')
  inputs.file('config/karma.config.js')

  dependsOn npm_install
  args = ['run', 'specs-ci']
}

test.dependsOn lint
test.dependsOn assetSpecs
check.dependsOn integrationTest

test {
  useJUnitPlatform()
}

jar {
  from(configurations.compileClasspath) {
    into "lib/"
  }
}
